---
// Progress indicator component for mobile-first portfolio
---

<div class="progress-indicator">
  <div class="progress-line"></div>
  <div class="progress-dots">
    <div class="progress-dot" data-section="intro">
      <span class="dot-label">Intro</span>
    </div>
    <div class="progress-dot" data-section="projects">
      <span class="dot-label">Projects</span>
    </div>
    <div class="progress-dot" data-section="technologies">
      <span class="dot-label">Tech</span>
    </div>
    <div class="progress-dot" data-section="contact">
      <span class="dot-label">Contact</span>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sections = document.querySelectorAll('.intro, .projects, .technologies, .contact');
    const dots = document.querySelectorAll('.progress-dot');
    const progressLine = document.querySelector('.progress-line');
    
    // Add IDs to sections if they don't exist
    sections.forEach((section, index) => {
      const sectionNames = ['intro', 'projects', 'technologies', 'contact'];
      if (!section.id) {
        section.id = sectionNames[index];
      }
    });

    function updateProgress() {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      // Default to first section (intro)
      let activeIndex = 0;
      
      sections.forEach((section, index) => {
        const htmlSection = section as HTMLElement;
        const sectionTop = htmlSection.offsetTop;
        const sectionHeight = htmlSection.offsetHeight;
        const sectionCenter = sectionTop + (sectionHeight / 2);
        
        // Check if the center of the viewport has passed the center of this section
        if (scrollPosition + (windowHeight / 2) >= sectionCenter) {
          activeIndex = index;
        }
      });
      
      // Handle edge case: if at very top of page, ensure intro is active
      if (scrollPosition < 100) {
        activeIndex = 0;
      }
      
      // Remove active class from all dots
      dots.forEach(dot => dot.classList.remove('active'));
      
      // Add active class to current dot
      if (dots[activeIndex]) {
        dots[activeIndex].classList.add('active');
      }
      
      // Update progress line
      const progress = ((activeIndex + 1) / sections.length) * 100;
      if (progressLine) {
        (progressLine as HTMLElement).style.height = `${progress}%`;
      }
    }

    // Smooth scroll to section when dot is clicked
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        const targetSection = sections[index] as HTMLElement;
        targetSection.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      });
    });

    // Update on scroll
    window.addEventListener('scroll', updateProgress);
    // Initial update
    updateProgress();
  });
</script>